class Solution {
public:
bool ispalindrome(ListNode*head){

if(head==NULL){
    return true;
}
if(head->next==NULL){
    return true;
}
    ListNode*slow=head;
    ListNode*fast=head->next;
    while(fast!=NULL){
        fast=fast->next;
        if(fast!=NULL){
            fast=fast->next;
            slow=slow->next;
        }
    }
    ListNode*mid=slow;
    ListNode*prev=NULL;
    
    ListNode*temp=mid->next;
    ListNode*forward=temp->next;
    while(temp!=NULL){
        forward=temp->next;
    temp->next=prev;
    prev=temp;
    temp=forward;
    }
slow->next=prev;    //by this we connect the reverse list after the mid to the list till mid; i.e slow points to mid Node and prev points to head off the node after 
//reversing the list after mid  then we connect both part ; only then we make the copmparison in the same list;
    ListNode*temp1=head;
    ListNode*temp2=mid->next;  //mid->next is accessible only if we connect the list(from mid-Next to till last node) after reversing it ;
    while(temp2!=NULL){
        if(temp1->val!=temp2->val){
            return false;
        }
        else{
            temp1=temp1->next;
            temp2=temp2->next;
        }
    }
    return true;
}

 

    bool isPalindrome(ListNode* head) {
        return ispalindrome(head);
    }
};
