class Solution {
public:
    int findMinDifference(vector<string>& timePoints) {
        vector<int>minutes;
int ans=INT_MAX;
int firstlastmin=INT_MAX;
        for(int i=0;i<timePoints.size();i++){
            string curr=timePoints[i];
            int hours=stoi(curr.substr(0,2));  //substr ko kis string ke sath use karna hai uske sath use karenge . laga kar and isme pahla parameter ye batayega ki substr
            //kis index se lena hai ans second parameter ye batayega ki substr kitna lenght ka chahihye i.e us index se kitne character chahiye;
            int min=stoi(curr.substr(3,2));
            int totalminutes=hours*60+min;
            minutes.push_back(totalminutes);
        }
        sort(minutes.begin(),minutes.end());
        for(int i=0;i<minutes.size()-1;i++){
            int diff=minutes[i+1]-minutes[i];
            ans=min(ans,diff);
        }
int n=minutes.size();

//ye condition important hai 

//remember 24hr=1440 min 

//ham upar har elment ka difrence find kar chuke hai except the last and first element in minutes vector because time circular hota hai to hame aisa karna padega;

        int firstlastdiff1=minutes[n-1]-minutes[0]; agar first index 00:00  ya 00:some xy min ahi hua to;
 int firstlastdiff2=(minutes[0]+1440)-minutes[n-1];  //agar rfirst index 00:00 ya 00:xy min hua to upar ke method  se inka diff wrong calculate higa because 
 //00:00 ko minutes wale vector me 0 vlaue hogi jabki 1440 honi chihiye;
      firstlastmin=min(firstlastdiff1,  firstlastdiff2);  //fist and last ke diffrence in dono case me se kaun sa minimum aa raha hai usko le elenge then upar ke 
      //min se se compare kar lenge and jo mimimum hoga usko return kar denge;
ans=min(ans,firstlastmin);
return ans;
    }
};
