
//Recursive solutiononly function

class Solution {
public:


int profit(vector<int>&prices,int index,int  buy){
if(index==prices.size()){
    return 0;
}

int ans=0;

if(buy){
ans=max(-prices[index]+profit(prices,index+1,0),0+profit(prices,index+1,1));
}
else{
    ans=max(prices[index]+profit(prices,index+1,1),profit(prices,index+1,0));
}
return ans;
}
    int maxProfit(vector<int>& prices) {
        return profit(prices,0,1);
    }
};












//Memoization or topdown approach solution

class Solution {
public:


int profit(vector<int>&prices,int index,int  buy,vector<vector<int>>&dp){
if(index==prices.size()){
    return 0;
}
if(dp[index][buy]!=-1){
    return dp[index][buy];
}

int ans=0;

if(buy){
ans=max(-prices[index]+profit(prices,index+1,0,dp),0+profit(prices,index+1,1,dp));
}
else{
    ans=max(prices[index]+profit(prices,index+1,1,dp),profit(prices,index+1,0,dp));
}
dp[index][buy]= ans;
return dp[index][buy];
}
    int maxProfit(vector<int>& prices) {
int n=prices.size();
vector<vector<int>>dp(n+1,vector<int>(2,-1));

        return profit(prices,0,1,dp);
    }
};
