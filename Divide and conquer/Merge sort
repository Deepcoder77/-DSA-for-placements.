#include <iostream>
using namespace std;
void merge(int*arr,int s,int e){
  int mid=s+(e-s)/2;
  int len1=mid-s+1;
  int len2=e-mid;
  int *arr1=new int[len1];
int *arr2=new int[len2];
int i=0;
int k=s;
//copy divided part of array in new arrays
while(i<len1){
  arr1[i++]=arr[k++];
}
int j=0;
 k=mid+1;
while(j<len2){
  arr2[j++]=arr[k++];
}

//now we are going to merge these two array
int l=0;
int  r=0;
int m=s;
while(l<len1&&r<len2){
if(arr1[l]<arr2[r]){
  arr[m++]=arr1[l++];
}
else{
arr[m++]=arr2[r++];
}
}

while(l<len1){
  arr[m++]=arr1[l++];
}
while(r<len2){
  arr[m++]=arr2[r++];
}
}

void mergesort(int*arr,int s,int e){
  if(s>=e){
    return;
  }
  int mid=s+(e-s)/2;
  mergesort(arr, s,mid);
   mergesort(arr, mid+1,e);
   merge(arr,s,e);
}

int main() {
int arr[7]={8,3,11,2,9,2,5};
mergesort(arr,0,6);
for(int i=0;i<7;i++){
  cout<<arr[i]<<" ";
}
  return 0;
}

//Time complexity=O(nlogn)
